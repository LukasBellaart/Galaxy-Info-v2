var J=Object.create;var g=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var ee=Object.getOwnPropertyNames;var te=Object.getPrototypeOf,re=Object.prototype.hasOwnProperty;var _=s=>g(s,"__esModule",{value:!0});var w=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),se=(s,e)=>{_(s);for(var t in e)g(s,t,{get:e[t],enumerable:!0})},ae=(s,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of ee(e))!re.call(s,r)&&r!=="default"&&g(s,r,{get:()=>e[r],enumerable:!(t=V(e,r))||t.enumerable});return s},ie=s=>ae(_(g(s!=null?J(te(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);var K=w((de,N)=>{N.exports=function(e){e=e.toLowerCase();var t={for:function(r){var a=0,i={found:!0};r=r.toLowerCase();for(var c=r.length,d=0;d<c;d++){if(a=e.indexOf(r[d],a),a===-1)return{found:!1};d==0&&(i.start=a)}return i.end=a+1,i}};return t}});var U=w((me,H)=>{H.exports=function(e,t){for(var r=e.length,a=Math.ceil(r*t)||1,i=[],c=r;c>=a;){for(var d=r-c,n=0;n<=d;n++){var o=e.substr(n,c);i.indexOf(o)===-1&&i.push(o)}c--}return i}});var j=w((ge,W)=>{var ne=K(),oe=U();W.exports=function(e,t,r){if(typeof e!="string"||e==="")return t;r=r||{};var a=r.accessor||function(n){return n},i=r.precision===void 0?1:r.precision,c=[],d=oe(e,i);return t.forEach(function(n){var o=a(n);d.find(function(O){var m=ne(o).for(O);return m.found&&c.push({gram:O,length:m.end-m.start,start:m.start,searchableItem:o,item:n}),m.found})}),c.sort(function(n,o){return n.gram.length!==o.gram.length?o.gram.length-n.gram.length:n.length!==o.length?n.length-o.length:n.start!==o.start?n.start-o.start:n.searchableItem>o.searchableItem?1:n.searchableItem<o.searchableItem?-1:0}).map(function(n){return n.item})}});se(exports,{Alpha:()=>l,BASE_REQUIREMENTS:()=>he,BUILD_MENU_CLASSES:()=>ue,CLASSES:()=>le,ClientShips:()=>q,ClientTurrets:()=>Y,DAMAGE_TYPE_DISTRIBUTIONS:()=>h,Dps:()=>p,NON_LIMITED_QUEST_SHIPS:()=>pe,PERMITS:()=>y,RESISTANCE:()=>A,SPINALS:()=>f,SPINAL_RELOAD_EXPONENT:()=>I,ServerShips:()=>Q,ServerTurrets:()=>Z,Ship:()=>x,ShipFighters:()=>G,ShipNotFoundError:()=>S,ShipSpinal:()=>z,ShipSpinalGun:()=>L,ShipSpinals:()=>k,ShipTurrets:()=>M,ShipWeapons:()=>R,Ships:()=>b,ShipsNotDumpedError:()=>D,ShipsNotInitializedError:()=>C,TURRET_CLASS_DAMAGE_DISTRIBUTIONS:()=>T,TurretNotFoundError:()=>F,Turrets:()=>v,TurretsNotDumpedError:()=>B,TurretsNotInitializedError:()=>P,Weapon:()=>u});var $=ie(j());var le=["Miner","Freighter","Frigate","Destroyer","Cruiser","Battlecruiser","Battleship","Dreadnought","Carrier","Super Capital","Fighter","Titan","Alien","Admin"],h={Laser:{shield:1,hull:.3,ideal:"shield"},Kinetic:{shield:.4,hull:1,ideal:"hull"},Plasma:{shield:.9,hull:.9,ideal:"shield"},Missile:{shield:.7,hull:1,ideal:"hull"},Quantum:{shield:1,hull:1,ideal:"shield"}},T={Mining:h.Laser,Laser:h.Laser,Railgun:h.Kinetic,Flak:h.Kinetic,Cannon:h.Kinetic,PDL:h.Laser,Beam:h.Kinetic},f={Phaser:{damageDistribution:h.Laser,Tiny:{damage:28,reload:.8,range:3e3,velocity:5e3},Small:{damage:40,reload:1,range:4e3,velocity:4500},Medium:{damage:72,reload:1.6,range:5e3,velocity:4e3},Large:{damage:120,reload:2.4,range:6e3,velocity:3500},Huge:{damage:198,reload:3.6,range:6500,velocity:3e3}},Cannon:{damageDistribution:h.Kinetic,Tiny:{damage:40,reload:1.6,range:3e3,velocity:3e3},Small:{damage:60,reload:2,range:4e3,velocity:2800},Medium:{damage:112,reload:3.2,range:5e3,velocity:2600},Large:{damage:160,reload:4,range:6e3,velocity:2400},Huge:{damage:270,reload:6,range:6500,velocity:2200}},Torpedo:{damageDistribution:h.Missile,Tiny:{damage:200,reload:5,range:5e3,velocity:700},Small:{damage:330,reload:6,range:6e3,velocity:600},Medium:{damage:490,reload:7,range:7e3,velocity:500},Large:{damage:680,reload:8,range:9e3,velocity:400},Huge:{damage:900,reload:9,range:1e4,velocity:300}}},I=1.1,y={"37":"SC Build","38":"Class A","39":"Class B","40":"Class C","41":"Class D","42":"Class E"},A={Fighter:0,Frigate:.2,Destroyer:.25,Cruiser:.3,Battlecruiser:.4,Battleship:.45,Dreadnought:.5,Carrier:.55,"Super Capital":.65,Titan:.7,Miner:.3,Freighter:.1,Alien:.3,Admin:.9},he={Fighter:1,Frigate:1,Destroyer:1,Cruiser:1,Battlecruiser:1,Battleship:1,Dreadnought:2,Carrier:2,"Super Capital":3,Titan:1,Miner:1,Freighter:1,Alien:1,Admin:1},ue=["Miner","Freighter","Frigate","Destroyer","Cruiser","Battlecruiser","Battleship","Dreadnought","Carrier","Super Capital"],pe=["Nightmare","Atheon","Zhen","Helios","Imperator","Osiris","Slipstream"];var u=class{},l=class{constructor(e,t,r){this.shield=e??0,this.hull=t??0,this.max=r??0}add(...e){for(let t of e)this.shield+=t.shield,this.hull+=t.hull,this.max+=t.max;return this}multiply(e){return this.shield*=e,this.hull*=e,this.max*=e,this}toString(){return`${this.shield}/${this.hull}/${this.max}`}},p=class{constructor(e,t){this.shield=e??0,this.hull=t??0}add(...e){for(let t of e)this.shield+=t.shield,this.hull+=t.hull;return this}multiply(e){return this.shield*=e,this.hull*=e,this}get average(){return(this.shield+this.hull)/2}toString(){return`${this.shield}/${this.hull}/${this.average}`}};var C=class extends Error{},D=class extends Error{},S=class extends Error{constructor(){super("Could not find a ship with that name.")}};function E(...s){console.log("[Ships]",...s)}var b=class{constructor(e){this.ships={},this.turrets=e,this.initialized=!1}assertReady(){if(!this.initialized)throw new C("Ships instance has not been initialized; do `await <Ships>.init()` before using it.");if(Object.keys(this.ships).length===0)throw new D("Ships have not been exported from the game.")}async load(e){this.ships={},await this.loadShips(e,this.turrets,!0),await this.loadShips(e,this.turrets,!1),this.initialized=!0}async loadShips(e,t,r){for(let a of Object.values(e))try{if(!r&&a.class==="Fighter"||r&&a.class!=="Fighter")continue;let i=new x(this.ships,t,a);this.ships[i.name]=i}catch(i){console.log(`Failed to load ship ${a.name}: ${i}`)}}find(e){if(this.assertReady(),this.ships.hasOwnProperty(e))return this.ships[e];let t=(0,$.default)(e,Object.keys(this.ships))[0];if(!t)throw new S;return this.ships[t]}all(e){this.assertReady(),e||(e={});let t={};for(let r in this.ships)e.secret===!1&&(this.ships[r].secret||this.ships[r].test)||(t[r]=this.ships[r]);return t}get(e){if(this.assertReady(),!this.ships.hasOwnProperty(e))throw new S;return this.ships[e]}fromSerializedShip(e){return this.assertReady(),new x(this.ships,this.turrets,e)}},x=class{constructor(e,t,r){this.serializedShip=r,this.name=r.name,this.test=r.test,this.class=r.class,this.resistance=A[this.class],this.description=r.description??"(no description)",this.eventId=r.eventId,this.permit=this.calculatePermit(),this.explosionSize=r.explosionSize,this.notForSale=r.notForSale,this.cargoHold=r.cargoHold,this.oreHold=r.oreHold,this.secret=r.secret,this.nonPlayer=r.nonPlayer||["Alien","Titan"].includes(this.class),this.canWarp=r.canWarp,this.stealth=r.stealth,r.customDrift&&(this.customDrift=r.customDrift,this.vip=r.vip),this.health=r.health,this.speed={top:r.topSpeed,acceleration:r.acceleration,turn:r.turnSpeed},this.weapons=new R(t,r.weapons),this.fighters=new G(e,r.fighters instanceof Array?r.fighters:[]),this.extraMaterials=r.extraMaterials}calculatePermit(){if(!this.eventId||!this.serializedShip.permitOverride)return null;let e=this.serializedShip.permitOverride.toString();if(!(e in y))throw new Error(`Unknown permit override: ${e}`);return y[e]}},R=class extends u{constructor(e,t){super();this.turrets=new M(e,t.turrets instanceof Array?t.turrets:[]),this.spinals=new k(t.spinals)}alpha(e,t=0){let r=this.turrets.alpha(e,t),a=this.spinals.alpha(e);return r.add(a)}dps(e,t=0){let r=this.turrets.dps(e,t),a=this.spinals.dps(e);return r.add(a)}},M=class extends u{constructor(e,t){super();this.turrets=new Map;for(let r of t){let a=e.get(r);this.incrementTurret(a)}}incrementTurret(e){let t=this.turrets.get(e)??0;this.turrets.set(e,t+1)}alpha(e,t=0){let r=new l;for(let[a,i]of this.turrets)r.add(a.alpha(e).multiply(i).multiply(1+t));return r}dps(e,t=0){let r=new p;for(let[a,i]of this.turrets)r.add(a.dps(e).multiply(i).multiply(1+t));return r}},k=class extends u{constructor(e){super();this.spinals=e.map(t=>new z(t))}alpha(e){return new l().add(...this.spinals.map(t=>t.alpha(e)))}dps(e){return new p().add(...this.spinals.map(t=>t.dps(e)))}},z=class extends u{constructor(e){super();if(this.guns=e.map(r=>new L(r)),this.guns.length===0)throw new Error("Spinal has no guns");let t=this.guns[0];for(let r of this.guns)r.reload>t.reload&&(t=r);this.reload=t.reload}alpha(e){return new l().add(...this.guns.map(t=>t.alpha(e)))}dps(e){let t=this.alpha(e);return new p(t.shield/this.reload,t.hull/this.reload)}},L=class extends u{constructor(e){super();this.weaponSize=e.attributes.ProjectileSize,this.weaponType=e.attributes.WeaponType;let t=f[this.weaponType],r=t[this.weaponSize];this.range=e.attributes.Range??f[this.weaponType][this.weaponSize].range,this.interval=e.attributes.BarrelInterval??0,this.barrels=e.barrels,typeof e.attributes.ReloadTime!="undefined"?this.reload=Math.max(.01,this.interval*(this.barrels-1)+e.attributes.ReloadTime):this.reload=this.interval*(this.barrels-1)+r.reload*Math.pow(I,this.barrels-1),this._alpha=new l(this.barrels*r.damage*t.damageDistribution.shield,this.barrels*r.damage*t.damageDistribution.hull,this.barrels*r.damage*t.damageDistribution[t.damageDistribution.ideal])}alpha(e){return e&&e>this.range?new l:new l().add(this._alpha)}dps(e){let t=this.alpha(e);return new p(t.shield/this.reload,t.hull/this.reload)}},G=class extends u{constructor(e,t){super();this.hasFighters=!1,this.fighters=new Map;for(let r of t)try{let a=e[r];if(!a)continue;this.incrementFighter(a),this.hasFighters=!0}catch(a){E(a)}}incrementFighter(e){let t=this.fighters.get(e)??0;this.fighters.set(e,t+1)}alpha(e,t=0){let r=new l;for(let[a,i]of this.fighters)r.add(a.weapons.alpha(e,t).multiply(i));return r}dps(e,t=0){let r=new p;for(let[a,i]of this.fighters)r.add(a.weapons.dps(e,t).multiply(i));return r}},q=class extends b{constructor(e){super(e)}async init(e){await super.load(e)}},Q=class extends b{constructor(e){super(e.turrets);this.GalaxyInfo=e}async init(){try{let e=await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:this.GalaxyInfo.config.db.kvKeys.serializedShips},rejectOnNotFound:!0}),t=await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:this.GalaxyInfo.config.db.kvKeys.serializedTestShips},rejectOnNotFound:!0});await super.load({...e.value,...t.value})}catch(e){E("Ships database reset.",e)}E("Initialized")}async save(e,t){await this.GalaxyInfo.prisma.keyValue.upsert({create:{key:t?this.GalaxyInfo.config.db.kvKeys.serializedTestShips:this.GalaxyInfo.config.db.kvKeys.serializedShips,value:e},update:{value:e},where:{key:t?this.GalaxyInfo.config.db.kvKeys.serializedTestShips:this.GalaxyInfo.config.db.kvKeys.serializedShips}});let r=(await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:t?this.GalaxyInfo.config.db.kvKeys.serializedShips:this.GalaxyInfo.config.db.kvKeys.serializedTestShips},rejectOnNotFound:!0})).value;await super.load({...e,...r})}};var P=class extends Error{},B=class extends Error{},F=class extends Error{},v=class{constructor(){this.turrets={},this.initialized=!1}assertReady(){if(!this.initialized)throw new P("Turrets instance has not been initialized; do `await <Turrets>.init()` before using it.");if(Object.keys(this.turrets).length===0)throw new B("Turrets have not been exported from the game.")}async load(e){for(let t of Object.values(e)){let r=new X(t);this.turrets[r.name]=r}this.initialized=!0}get(e){if(this.assertReady(),!this.turrets.hasOwnProperty(e))throw new F(`Could not find turret called ${e}.`);return this.turrets[e]}all(){return this.assertReady(),this.turrets}},X=class extends u{constructor(e){super();let t=e.Group==="Alien"?h.Plasma:T[e.Class];if(!t)throw new Error(`Unknown turret class ${e.Class}`);this._alpha=new l(e.Damage*t.shield,e.Damage*t.hull,e.Damage*t[t.ideal]),this.name=e.Name,this.range=e.Range,this.reload=e.Reload,this.group=e.Group,this.size=e.TurretSize,this.turretClass=e.Class,this.baseAccuracy=e.BaseAccuracy,this.trackingAccuracy=e.SpeedDenominator,this.test=["Test","Modelers"].includes(this.group),this.affectedByLoyalty=!["Mining"].includes(e.Class)}alpha(e,t=0){return this.affectedByLoyalty||(t=0),e&&e>this.range?new l:new l().add(this._alpha).multiply(1+t)}dps(e,t=0){let r=this.alpha(e,t);return new p(r.shield/this.reload,r.hull/this.reload)}accuracyDeviation(e){return this.size==="Large"&&e>80&&(e*=1+(e-80)*.003),this.size==="Medium"&&e>120&&(e*=1+(e-120)*.003),this.size==="Small"&&e>170&&(e*=1+(e-170)*.003),this.baseAccuracy+e/this.trackingAccuracy}},Y=class extends v{constructor(){super()}async init(e){await super.load(e)}},Z=class extends v{constructor(e){super();this.GalaxyInfo=e}async init(){try{let e=await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:this.GalaxyInfo.config.db.kvKeys.serializedTurrets},rejectOnNotFound:!0});await this.load(e.value)}catch(e){console.log("Turrets database reset.",e)}}async save(e){await this.GalaxyInfo.prisma.keyValue.upsert({create:{key:this.GalaxyInfo.config.db.kvKeys.serializedTurrets,value:e},update:{value:e},where:{key:this.GalaxyInfo.config.db.kvKeys.serializedTurrets}}),await this.load(e)}};
